{"mappings":"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","sources":["src/js/blocklyinterface.js","src/js/utility/Toolbox.js","src/js/blocks/categories.js"],"sourcesContent":["import { Toolbox, unwind } from \"./utility/Toolbox.js\";\nimport { Categories } from \"./blocks/categories.js\";\nimport _ from \"lodash\";\nimport { blocklyHooks } from \"./app.js\";\n//console.log(blocklyHooks)\n\n/** Class used to manage Blockly interface\n * @class\n */\n\nexport const BlocklyInterface = function () {\n  // Handle custom block creation\n  createCustomBlocks();\n  const printVal = document.querySelector(\"#printVal\");\n\n  // UI Elements\n  //this.runButton = document.getElementById('runButton');\n\n  window.interpreter = null;\n  window.runner = null;\n  window.latestCode = \"\";\n  window.editorMode = \"block\";\n  window.highlightPause = false;\n  let {\n    cat_logic,\n    cat_loops,\n    cat_math,\n    cat_sep,\n    cat_data,\n    cat_vars,\n    cat_list,\n  } = Categories;\n  let _toolbox = new Toolbox([\n    cat_logic,\n    cat_loops,\n    cat_math,\n    cat_sep,\n    cat_data,\n    cat_vars,\n    cat_list,\n  ]);\n\n  window.workspace = Blockly.inject(\"blocklyDiv\", {\n    media: \"https://unpkg.com/browse/blockly/media/\",\n    toolbox: _toolbox.toString(),\n    //toolbox: document.getElementById(\"toolbox\"),\n  });\n\n  // Create custom tool box to load when category selected\n  let createCustomToolBox = (blocks) => {\n    let res = [];\n    blocks.forEach((element) => {\n      let block = unwind([element], true);\n      block = Blockly.Xml.textToDom(block).firstChild;\n      res.push(block);\n    });\n    //console.log(res);\n    return res;\n  };\n\n  // Triggers everytime category opens\n  window.workspace.registerToolboxCategoryCallback(\"DATA\", (ws) => {\n    return createCustomToolBox([\n      \"plot_raw\",\n      \"getRaw\",\n      \"removeSignalMean\",\n      \"getabsdata\",\n      \"filter_signal\",\n    ]);\n  });\n\n  /*\n  Blockly.Xml.domToWorkspace(\n    document.getElementById(\"startBlocks\"),\n    window.workspace\n  );\n  */\n\n  // Exit is used to signal the end of a script.\n  Blockly.JavaScript.addReservedWords(\"exit\");\n\n  // Clear interpreter\n  window.resetInterpreter = function () {\n    //console.log(\"resetInterpreter\")\n    window.interpreter = null;\n    window.workspace.highlightBlock(null);\n    if (window.runner) {\n      clearTimeout(window.runner);\n      window.runner = null;\n    }\n  };\n\n  window.generateCodeAndLoadIntoInterpreter = function () {\n    Blockly.JavaScript.STATEMENT_PREFIX = \"highlightBlock(%1);\\n\";\n    Blockly.JavaScript.addReservedWords(\"highlightBlock\");\n    window.latestCode = Blockly.JavaScript.workspaceToCode(window.workspace);\n    let xml = Blockly.Xml.workspaceToDom(window.workspace);\n    // sync code. comment to stop synching\n    // Add this later to offline app\n    //window.textEditor.setValue(window.latestCode);\n    //this.runButton = ''\n  };\n\n  let formatList = (list) => {\n    return list.properties ? _.values(list.properties) : list;\n  };\n\n  // We need this to handle how to plot x-axis different based on wheter we are handlings user defined data or physio data\n  // This is just a quick fix for now. When updated to support different types of data we will need to revisit this\n  // Currently the plot functions checks to see if the list has a properties node. If so it assumes its user defined. Otherwise the x-axis is simply mapped to the value's index\n  let formatListCallback = (list, processedData, cb) => {\n    if (list.properties) {\n      list.properties = processedData;\n      cb(list); // returns here\n    } else {\n      cb(processedData);\n    }\n  };\n\n  /////////////////////// BEGIN INTERPRETER SETUP ///////////////////////////////////////////\n\n  // Add native to blockly here\n  // This is too big now needs to be moved into its on module (TODO)\n  window.initApi = function (interpreter, globalObject) {\n    /* Get Filter */\n    var wrapper = async function (list, low, high, callback) {\n      try {\n        //console.log(list, low, high)\n        let arr = formatList(list);\n        let filteredData = await blocklyHooks.filterSignalHook(arr, low, high);\n        formatListCallback(list, filteredData, callback);\n        \n        /*if (list.properties) {\n          list.properties = filteredData;\n          return list;\n          //cb(list); // returns here\n        } else {\n          //cb(processedData);\n          return filteredData;\n        }\n        */\n      } catch (error) {\n        return error;\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"filterSignal\",\n      interpreter.createAsyncFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    /* Get Abs Values */\n\n    var wrapper = async function (list, callback) {\n      try {\n        let arr = formatList(list);\n        let absData = await blocklyHooks.getAbsValueHook(arr);\n        formatListCallback(list, absData, callback);\n      } catch (error) {\n        return error;\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"getAbsVals\",\n      interpreter.createAsyncFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    /* Remove Mean */\n    // Example of using async functions with JS interpreter\n    // See https://neil.fraser.name/software/JS-Interpreter/demos/async.html for example\n    var wrapper = async function (list, callback) {\n      try {\n        let arr = formatList(list);\n        let meanRemovedData = await blocklyHooks.removeMeanHook(arr);\n        formatListCallback(list, meanRemovedData, callback);\n        //callback(meanRemovedData)    // returns here\n      } catch (error) {\n        return error;\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"removeMean\",\n      interpreter.createAsyncFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Get Raw\n    // Not really sure if this matters.\n    //the code doesn't actually call getRaw in customBlock currently.\n    //Keep and eye on this in the future.\n    var wrapper = function () {\n      try {\n        return blocklyHooks.raw();\n      } catch (error) {\n        return error;\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"getRawData\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Plot Raw\n    var wrapper = function (list, sampleCount) {\n      if (list.properties) {\n        var arr = _.values(list.properties);\n        blocklyHooks.plotRaw(arr, true, sampleCount);\n      } else {\n        //console.log(list, sampleCount)\n        blocklyHooks.plotRaw(list, false, sampleCount);\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"plotRaw\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Pan robot\n    var wrapper = function (cmd) {\n      window.pan(cmd);\n      console.log(\"PAN \", cmd);\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"testVar\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    // Print to console\n    var wrapper = function (cmd, something) {\n      //console.log(cmd, something);\n      if (cmd !== undefined) {\n        printVal.innerHTML = cmd;\n      } else {\n        printVal.innerHTML = \"\";\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"print\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // setVelocityX\n    var wrapper = function (cmd, something) {\n      //console.log(cmd, something);\n      window.player.setVelocityX(cmd);\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"setVelocityX\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    // setVelocityY\n    var wrapper = function (cmd, something) {\n      window.player.setVelocityY(cmd * -1);\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"setVelocityY\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    // END setY\n\n    //////////////////////////////////////////////////////////////////\n\n    // setX\n    var wrapper = function (cmd, something) {\n      window.player.x = cmd;\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"setX\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // setY\n    var wrapper = function (cmd, something) {\n      window.player.y = cmd;\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"setY\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    // END setX\n\n    //////////////////////////////////////////////////////////////////\n\n    // Band power\n    var wrapper = function (band, channel) {\n      try {\n        return window.bands[channel][band];\n      } catch (error) {\n        return error;\n      }\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"getBandPower\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    // create wrapper to pull facial data\n    var wrapper = function (feature, component) {\n      try {\n        if (component == \"score\") {\n          return window[feature][component];\n        } else {\n          return window[feature][\"position\"][component];\n        }\n      } catch (error) {\n        return error;\n      }\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"getFacialData\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Expression Score\n    var wrapper = function (expression) {\n      try {\n        console.log(\"expression\", expression);\n        return window[\"expressions\"][expression];\n      } catch (error) {\n        return error;\n      }\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"getExpressionScore\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Get Speech\n    var wrapper = function () {\n      try {\n        return `${window.lastSpeech}`;\n      } catch (error) {\n        return error;\n      }\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"getSpeech\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Speak\n    var wrapper = function (text) {\n      try {\n        window.synthesizeSpeech(text);\n      } catch (error) {\n        return error;\n      }\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"speak\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Update Face\n    var wrapper = function (emotion, gaze, color) {\n      try {\n        window.updateFace(emotion, gaze, color);\n      } catch (error) {\n        return error;\n      }\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"updateFace\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Get Physio\n    var wrapper = function () {\n      try {\n        //console.log(window.filteredSample);\n        return window.filteredSample; // get latest physio data here\n      } catch (error) {\n        return error;\n      }\n    };\n\n    interpreter.setProperty(\n      globalObject,\n      \"getPhysio\",\n      interpreter.createNativeFunction(wrapper)\n    );\n\n    //////////////////////////////////////////////////////////////////\n\n    // Handle highlighting\n    function highlightBlock(id) {\n      window.workspace.highlightBlock(id);\n    }\n\n    // Add an API function for highlighting blocks.\n    const wrapperHighlight = function (id) {\n      id = String(id || \"\");\n      return highlightBlock(id);\n    };\n    interpreter.setProperty(\n      globalObject,\n      \"highlightBlock\",\n      interpreter.createNativeFunction(wrapperHighlight)\n    );\n\n    // Add an API for the wait block.  See wait_block.js\n    initInterpreterWaitForSeconds(interpreter, globalObject);\n  };\n\n  ///////////////////////END INTERPRETER SETUP ///////////////////////////////////////////\n\n  window.runBlocklyCode = function () {\n    console.log(\"latest Code: \", window.latestCode);\n    //console.log(\"Editor mode? \", window.editorMode);\n    //console.log(\"Text code is \", window.textEditor.getValue());\n    window.workspace.highlightBlock(null);\n    if (window.editorMode == \"block\") {\n      window.interpreter = new Interpreter(window.latestCode, window.initApi);\n    } else {\n      // use latest text code\n      var textCode = window.textEditor.getValue();\n      window.interpreter = new Interpreter(textCode, window.initApi);\n      //console.log(\"HERE\");\n    }\n\n    window.runner = function () {\n      if (!window.interpreter) return;\n\n      // console.log(\"running\", window.interpreter)\n\n      // Run is the example provided for async apps. However highlighting does not work well\n      //var hasMore = window.interpreter.run();\n\n      var hasMore = window.interpreter.step();\n\n      //console.log(\"hasMore: \", hasMore)\n      if (hasMore) {\n        setTimeout(window.runner, 10);\n      } else {\n        // console.log(\"window.resetInterpreter\")\n        window.resetInterpreter();\n      }\n    };\n    try {\n      window.runner();\n    } catch (error) {\n      return error;\n    }\n  };\n};\n\nBlocklyInterface.prototype.init = function () {\n  //console.log(\"Blockly interface started\")\n  window.generateCodeAndLoadIntoInterpreter();\n  window.workspace.addChangeListener(function (event) {\n    if (!(event instanceof Blockly.Events.Ui)) {\n      // Something changed. Parser needs to be reloaded.\n      window.resetInterpreter();\n      window.generateCodeAndLoadIntoInterpreter();\n\n      // Don't run code until user is ready to run code\n      //window.runBlockCode();\n    }\n  });\n};\n\nwindow.runBlockCode = function () {\n  if (window.interprete == null) {\n    //this.runButton = 'disabled'\n    //console.log(\"setTimeout(window.runBlocklyCode, 1)\")\n    setTimeout(window.runBlocklyCode, 1);\n  }\n};\n","/**\n * @class Toolbox\n *\n * A simple wrapper for Blockly's Toolbox\n */\n\nexport class Toolbox {\n  constructor(modules) {\n    this.modules = modules;\n    //console.log(this.modules);\n  }\n\n  toString() {\n    let res = '<xml style=\"display: none;\">';\n    res += unwind(this.modules);\n    res += \"</xml>\";\n    //console.log(res);\n    return res\n  }\n}\n\nexport function unwind(arg, prepend_xml = false) {\n  let res = prepend_xml ? \"<xml>\" : \"\";\n  let cur;\n  for (let obj of arg) {\n    if (obj.modules) {\n      // The argument is a category\n      cur = obj;\n\n      // Create the category header\n      res += '<category name=\"' + cur.name + '\" colour=\"' + cur.colour + '\"';\n\n      // Allow for custom category types\n      if (cur.custom) {\n        res += ' custom=\"' + cur.custom + '\"';\n      }\n\n      res += \">\";\n      res += unwind(cur.modules);\n\n      // Close the category\n      res += \"</category>\";\n\n    } else if (obj.callbackKey) {\n      cur = what;\n      res += `<button text=\"${cur.text}\" callbackKey=\"${cur.callbackKey}\"></button>`;\n    \n    } else if (obj.text) {\n      // The argument is a label\n      cur = obj;\n      res += '<label text=\"' + cur.text + '\"></label>';\n    \n    } else if (obj.gap !== undefined) {\n      // The argument is a separator\n      cur = obj;\n      res += '<sep gap=\"' + cur.gap + '\"></sep>';\n    \n    } else {\n      // The argument is a block\n      res += '<block type=\"' + obj + '\"></block>';\n    }\n  }\n  \n  if (prepend_xml) res += \"</xml>\";\n  return res\n}\n","export const Categories = {\n  cat_logic: {\n  name: \"Logic\",\n  colour: \"%{BKY_LOGIC_HUE}\",\n  modules: [\n    \"controls_if\",\n    \"controls_ifelse\",\n    \"logic_compare\",\n  ]\n  },\n\n  cat_loops: {\n    name: \"Loops\",\n    colour: \"%{BKY_LOOPS_HUE}\",\n    modules: [\"controls_repeat\", \"wait_seconds\"],\n  },\n\n  cat_math: {\n    name: \"Math\",\n    colour: \"%{BKY_MATH_HUE}\",\n    modules: [\n      \"math_number\",\n      \"math_arithmetic\",\n      \"math_random_float\"\n    ]\n  },\n\n  cat_sep: {\n    gap: 0\n  },\n\n  cat_data: {\n    name: \"Data\",\n    colour: 330,\n    custom: \"DATA\",\n    modules: [\"plot_raw\", \"getRaw\"]\n  },\n\n  cat_vars: {\n    name: \"Variables\",\n    colour: 100,\n    custom: \"VARIABLE\",\n    modules: []\n  },\n\n  cat_list: {\n    name: \"List\",\n    colour: 50,\n    modules: [\n        \"lists_create_empty\",\n        \"lists_create_with\"\n    ]\n  }\n};\n"],"names":["$16nQR","parcelRequire","$eb43c9a51a457486$export$840162b0e08cfd31","createCustomBlocks","printVal","document","querySelector","window","interpreter","runner","latestCode","editorMode","highlightPause","cat_logic","cat_loops","cat_math","cat_sep","cat_data","cat_vars","cat_list","$3rELp","Categories","_toolbox","Toolbox","workspace","Blockly","inject","media","toolbox","toString","registerToolboxCategoryCallback","ws","blocks","res","forEach","element","block","unwind","Xml","textToDom","firstChild","push","createCustomToolBox","JavaScript","addReservedWords","resetInterpreter","highlightBlock","clearTimeout","generateCodeAndLoadIntoInterpreter","STATEMENT_PREFIX","workspaceToCode","workspaceToDom","formatList","list","properties","$parcel$interopDefault","$1WSnx","values","formatListCallback","processedData","cb","initApi","globalObject","wrapper","async","low","high","callback","arr","filteredData","$aQJSr","blocklyHooks","filterSignalHook","error","setProperty","createAsyncFunction","absData","getAbsValueHook","meanRemovedData","removeMeanHook","raw","createNativeFunction","sampleCount","plotRaw","cmd","pan","console","log","something","innerHTML","undefined","player","setVelocityX","setVelocityY","x","y","band","channel","bands","feature","component","expression","lastSpeech","text","synthesizeSpeech","emotion","gaze","color","updateFace","filteredSample","id","String","initInterpreterWaitForSeconds","runBlocklyCode","Interpreter","textCode","textEditor","getValue","step","setTimeout","prototype","init","addChangeListener","event","Events","Ui","runBlockCode","interprete","$0cd8da699f154cca$export$de0b1cf3baba0a2","$0cd8da699f154cca$export$23afdfead02da43","this","modules","constructor","arg","prepend_xml","cur","obj","name","colour","custom","callbackKey","what","gap","$282383868f2030a7$export$e1e795cef0e670e6"],"version":3,"file":"index.3d7ff278.js.map"}
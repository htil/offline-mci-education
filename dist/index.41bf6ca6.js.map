{"mappings":";;;;;AA8CA,SAASA,8BAA8BC,EAAaC,GAElDC,QAAQC,WAAWC,iBAAiB,kBAEpC,IAAIC,EAAUL,EAAYM,qBAAoB,SAC5CC,EACAC,GAIAC,WAAWD,EAA0B,IAAhBD,EACvB,IACAP,EAAYU,YAAYT,EAAc,iBAAkBI,EAC1D,CA9CAH,QAAQS,0BAA0B,CAChC,CACEC,KAAM,eACNC,SAAU,mBACVC,MAAO,CACL,CACEF,KAAM,eACNG,KAAM,UACNC,IAAK,EACLC,IAAK,IACLC,MAAO,IAGXC,kBAAmB,KACnBC,cAAe,KACfC,OAAQ,sBAQZnB,QAAQC,WAAW,aAAkB,SAAUmB,GAG7C,MADW,kBADGC,OAAOD,EAAME,cAAc,YACA,MAE3C","sources":["src/js/wait_block.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Example \"wait\" block that will pause the interpreter for a\n * number of seconds. Because wait is a blocking behavior, such blocks will\n * only work in interpreted environments.\n *\n * See https://neil.fraser.name/software/JS-Interpreter/docs.html\n */\nBlockly.defineBlocksWithJsonArray([\n  {\n    type: \"wait_seconds\",\n    message0: \" wait %1 seconds\",\n    args0: [\n      {\n        type: \"field_number\",\n        name: \"SECONDS\",\n        min: 0,\n        max: 600,\n        value: 1,\n      },\n    ],\n    previousStatement: null,\n    nextStatement: null,\n    colour: \"%{BKY_LOOPS_HUE}\",\n  },\n]);\n\n/**\n * Generator for wait block creates call to new method\n * <code>waitForSeconds()</code>.\n */\nBlockly.JavaScript[\"wait_seconds\"] = function (block) {\n  var seconds = Number(block.getFieldValue(\"SECONDS\"));\n  var code = \"waitForSeconds(\" + seconds + \");\\n\";\n  return code;\n};\n\n/**\n * Register the interpreter asynchronous function\n * <code>waitForSeconds()</code>.\n */\nfunction initInterpreterWaitForSeconds(interpreter, globalObject) {\n  // Ensure function name does not conflict with variable names.\n  Blockly.JavaScript.addReservedWords(\"waitForSeconds\");\n\n  var wrapper = interpreter.createAsyncFunction(function (\n    timeInSeconds,\n    callback\n  ) {\n    // Delay the call to the callback.\n    //console.log(\"waiting\");\n    setTimeout(callback, timeInSeconds * 1000);\n  });\n  interpreter.setProperty(globalObject, \"waitForSeconds\", wrapper);\n}\n"],"names":["initInterpreterWaitForSeconds","interpreter","globalObject","Blockly","JavaScript","addReservedWords","wrapper","createAsyncFunction","timeInSeconds","callback","setTimeout","setProperty","defineBlocksWithJsonArray","type","message0","args0","name","min","max","value","previousStatement","nextStatement","colour","block","Number","getFieldValue"],"version":3,"file":"index.41bf6ca6.js.map"}
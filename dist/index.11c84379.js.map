{"mappings":"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","sources":["src/js/customblock.js"],"sourcesContent":["// Block creation tool https://blockly-demo.appspot.com/static/demos/blockfactory/index.html\n\nvar createCustomBlocks = function () {\n\n  /* Get Filter */\n  var filterData = {\n    \"type\": \"filter_signal\",\n    \"message0\": \"filter between %1 and  %2 %3\",\n    \"args0\": [\n      {\n        \"type\": \"field_input\",\n        \"name\": \"low\",\n        \"text\": \"0\"\n      },\n      {\n        \"type\": \"field_input\",\n        \"name\": \"high\",\n        \"text\": \"30\"\n      },\n      {\n        \"type\": \"input_value\",\n        \"name\": \"signal\"\n      }\n    ],\n    \"output\": null,\n    \"colour\": 230,\n    \"tooltip\": \"\",\n    \"helpUrl\": \"\"\n  }\n\n  Blockly.Blocks[\"filter_signal\"] = {\n    init: function () {\n      this.jsonInit(filterData);\n    },\n  };\n\n  Blockly.JavaScript['filter_signal'] = function(block) {\n    var text_low = block.getFieldValue('low');\n    var text_high = block.getFieldValue('high');\n    var value_signal = Blockly.JavaScript.valueToCode(block, 'signal', Blockly.JavaScript.ORDER_ATOMIC);\n    //console.log(text_low, text_high, value_signal)\n    // TODO: Assemble JavaScript into code variable.\n    var code = `filterSignal(${value_signal}, ${text_low}, ${text_high})`;\n    // TODO: Change ORDER_NONE to the correct strength.\n    return [code, Blockly.JavaScript.ORDER_NONE];\n  };\n\n  \n\n\n  //////////////////////////////////////////////////////////////////\n\n  /* Get Absolute Values */\n\n  var getAbsoluteData = {\n    type: \"getabsdata\",\n    message0: \"Get Absolute Values %1\",\n    args0: [\n      {\n        type: \"input_value\",\n        name: \"LIST\",\n      },\n    ],\n    output: null,\n    colour: 330,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getabsdata\"] = {\n    init: function () {\n      this.jsonInit(getAbsoluteData);\n    },\n  };\n\n  Blockly.JavaScript[\"getabsdata\"] = function (block) {\n    var list = Blockly.JavaScript.valueToCode(\n      block,\n      \"LIST\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n\n    var code = `getAbsVals(${list})`;\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  //////////////////////////////////////////////////////////////////\n\n  /* Remove Mean */\n\n  var removeSignalMean = {\n    type: \"removeSignalMean\",\n    message0: \"Remove Mean %1\",\n    args0: [\n      {\n        type: \"input_value\",\n        name: \"LIST\",\n      },\n    ],\n    output: null,\n    colour: 330,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"removeSignalMean\"] = {\n    init: function () {\n      this.jsonInit(removeSignalMean);\n    },\n  };\n\n  Blockly.JavaScript[\"removeSignalMean\"] = function (block) {\n    var list = Blockly.JavaScript.valueToCode(\n      block,\n      \"LIST\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n\n    var code = `removeMean(${list})`;\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  //////////////////////////////////////////////////////////////////\n\n  /* Get Raw Data*/\n  var getRawData = {\n    type: \"getRaw\",\n    message0: \"Get Signal \",\n    output: null,\n    colour: 330,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getRaw\"] = {\n    init: function () {\n      this.jsonInit(getRawData);\n    },\n  };\n\n  Blockly.JavaScript[\"getRaw\"] = function (block) {\n    var code = `getRawData()`;\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  //////////////////////////////////////////////////////////////////\n\n  /* plot raw */\n  var plotRaw = {\n    type: \"plot_raw\",\n    message0: \"Plot Signal %1 # of Samples %2\",\n    inputsInline: false,\n    args0: [\n      { type: \"input_value\", name: \"LIST\" },\n      {\n        type: \"input_value\",\n        name: \"SECONDS\",\n        check: \"Number\",\n      },\n    ],\n    colour: 330,\n    previousStatement: null,\n    nextStatement: null,\n  };\n\n  Blockly.Blocks[\"plot_raw\"] = {\n    init: function () {\n      this.jsonInit(plotRaw);\n    },\n  };\n\n  Blockly.JavaScript[\"plot_raw\"] = function (block) {\n    //var seconds = block.getFieldValue(\"SECONDS\");\n    var list = Blockly.JavaScript.valueToCode(\n      block,\n      \"LIST\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n\n    var seconds = Blockly.JavaScript.valueToCode(\n      block,\n      \"SECONDS\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n\n    seconds = seconds ? seconds : 0;\n\n    return `plotRaw(${list}, ${seconds})\\n`;\n  };\n\n  //////////////////////////////////////////////////////////////////\n\n  /* pan() */\n  var panBy = {\n    message0: \"pan to %1\",\n    args0: [{ type: \"input_value\", name: \"ANGLE\", check: \"Number\" }],\n    previousStatement: null,\n    nextStatement: null,\n    colour: 355,\n  };\n\n  Blockly.Blocks[\"pan_by\"] = {\n    init: function () {\n      this.jsonInit(panBy);\n    },\n  };\n\n  Blockly.JavaScript[\"pan_by\"] = function (block) {\n    var angle = Blockly.JavaScript.valueToCode(\n      block,\n      \"ANGLE\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n    angle = angle > 1.5 ? 1.5 : angle;\n    angle = angle < -1.5 ? -1.5 : angle;\n    code = `pan(${angle})`;\n    return code;\n  };\n\n  //////////////////////////////////////////////////////////////////\n\n  /* Print */\n  var print = {\n    message0: \"print %1\",\n    args0: [{ type: \"input_value\", name: \"MSG\", check: \"Number\" }],\n    previousStatement: \"String\",\n    nextStatement: null,\n    colour: \"%{BKY_LOGIC_HUE}\",\n  };\n\n  Blockly.Blocks[\"print\"] = {\n    init: function () {\n      this.jsonInit(print);\n    },\n  };\n\n  Blockly.JavaScript[\"print\"] = function (block) {\n    var msg = Blockly.JavaScript.valueToCode(\n      block,\n      \"MSG\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n    return `print(${msg});\\n`;\n  };\n\n  //////////////////////////////////////////////////////////////////\n\n  /******** setVelocityX *****/\n  var setVelocityX = {\n    message0: \"setVelocityX %1\",\n    args0: [{ type: \"input_value\", name: \"velocityX\", check: \"Number\" }],\n    previousStatement: \"Number\",\n    nextStatement: null,\n    colour: \"355\",\n  };\n\n  Blockly.Blocks[\"setVelocityX\"] = {\n    init: function () {\n      this.jsonInit(setVelocityX);\n    },\n  };\n\n  Blockly.JavaScript[\"setVelocityX\"] = function (block) {\n    var val = Blockly.JavaScript.valueToCode(\n      block,\n      \"velocityX\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n    if (val) {\n      return `setVelocityX(${val});\\n`;\n    } else {\n      return ``;\n    }\n  };\n  /******** setVelocityX *****/\n\n  //////////////////////////////////////////////////////////////////\n\n  /******** setVelocityY *****/\n  var setVelocityY = {\n    message0: \"setVelocityY %1\",\n    args0: [{ type: \"input_value\", name: \"velocityY\", check: \"Number\" }],\n    previousStatement: \"Number\",\n    nextStatement: null,\n    colour: \"355\",\n  };\n\n  Blockly.Blocks[\"setVelocityY\"] = {\n    init: function () {\n      this.jsonInit(setVelocityY);\n    },\n  };\n\n  Blockly.JavaScript[\"setVelocityY\"] = function (block) {\n    var val = Blockly.JavaScript.valueToCode(\n      block,\n      \"velocityY\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n    if (val) {\n      return `setVelocityY(${val});\\n`;\n    } else {\n      return ``;\n    }\n  };\n\n  /******** setVelocityY *****/\n\n  //////////////////////////////////////////////////////////////////\n\n  /******** setX *****/\n  var setPlayerX = {\n    message0: \"setPlayerX %1\",\n    args0: [{ type: \"input_value\", name: \"playerX\", check: \"Number\" }],\n    previousStatement: \"Number\",\n    nextStatement: null,\n    colour: \"355\",\n  };\n\n  Blockly.Blocks[\"setPlayerX\"] = {\n    init: function () {\n      this.jsonInit(setPlayerX);\n    },\n  };\n\n  Blockly.JavaScript[\"setPlayerX\"] = function (block) {\n    var val = Blockly.JavaScript.valueToCode(\n      block,\n      \"playerX\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n    //console.log(val);\n    if (val) {\n      return `setX(${val});\\n`;\n    } else {\n      return \"\";\n    }\n  };\n\n  /******** setX *****/\n\n  /******** setY *****/\n  var setPlayerY = {\n    message0: \"setPlayerY %1\",\n    args0: [{ type: \"input_value\", name: \"playerY\", check: \"Number\" }],\n    previousStatement: \"Number\",\n    nextStatement: null,\n    colour: \"355\",\n  };\n\n  Blockly.Blocks[\"setPlayerY\"] = {\n    init: function () {\n      this.jsonInit(setPlayerY);\n    },\n  };\n\n  Blockly.JavaScript[\"setPlayerY\"] = function (block) {\n    var val = Blockly.JavaScript.valueToCode(\n      block,\n      \"playerY\",\n      Blockly.JavaScript.ORDER_NONE\n    );\n    if (val) {\n      return `setY(${val});\\n`;\n    } else {\n      return \"\";\n    }\n  };\n\n  /******** setY *****/\n\n  /******  getBandPower ********/\n  var getBandPower = {\n    type: \"getalpha\",\n    lastDummyAlign0: \"RIGHT\",\n    message0: \"getBandPower %1 %2 %3\",\n    args0: [\n      {\n        type: \"field_dropdown\",\n        name: \"channels\",\n        options: [\n          [\"af7\", \"af7\"],\n          [\"af8\", \"af8\"],\n          [\"tp9\", \"tp9\"],\n          [\"tp10\", \"tp10\"],\n        ],\n      },\n      {\n        type: \"input_dummy\",\n      },\n      {\n        type: \"field_dropdown\",\n        name: \"bands\",\n        options: [\n          [\"theta\", \"theta\"],\n          [\"alpha\", \"alpha\"],\n          [\"beta\", \"beta\"],\n          [\"gamma\", \"gamma\"],\n        ],\n      },\n    ],\n    inputsInline: true,\n    output: null,\n    colour: 75,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getBandPower\"] = {\n    init: function () {\n      this.jsonInit(getBandPower);\n    },\n  };\n\n  Blockly.JavaScript[\"getBandPower\"] = function (block) {\n    var channel = block.getFieldValue(\"channels\");\n    var band = block.getFieldValue(\"bands\");\n    var code = `getBandPower('${band}', '${channel}')`;\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  var getFacialData = {\n    type: \"getface\",\n    message0: \"getFacialData %1 %2 %3\",\n    args0: [\n      {\n        type: \"field_dropdown\",\n        name: \"feature\",\n        options: [\n          [\"nose\", \"nose\"],\n          [\"leftEye\", \"leftEye\"],\n          [\"rightEye\", \"rightEye\"],\n        ],\n      },\n      {\n        type: \"input_dummy\",\n      },\n      {\n        type: \"field_dropdown\",\n        name: \"component\",\n        options: [\n          [\"x\", \"x\"],\n          [\"y\", \"y\"],\n          [\"score\", \"score\"],\n        ],\n      },\n    ],\n    inputsInline: true,\n    output: null,\n    colour: 75,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getFacialData\"] = {\n    init: function () {\n      this.jsonInit(getFacialData);\n    },\n  };\n\n  Blockly.JavaScript[\"getFacialData\"] = function (block) {\n    var feature = block.getFieldValue(\"feature\");\n    var component = block.getFieldValue(\"component\");\n    console.log(\"feature, component\", feature, component);\n    var code = `getFacialData('${feature}', '${component}')`;\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  var getExpressionScore = {\n    type: \"getexpressionscore\",\n    message0: \"getExpressionScore %1\",\n    args0: [\n      {\n        type: \"field_dropdown\",\n        name: \"expressions\",\n        options: [\n          [\"neutral\", \"neutral\"],\n          [\"happy\", \"happy\"],\n          [\"sad\", \"sad\"],\n          [\"angry\", \"angry\"],\n          [\"fearful\", \"fearful\"],\n          [\"disgusted\", \"disgusted\"],\n          [\"surprised\", \"surprised\"],\n        ],\n      },\n    ],\n    inputsInline: true,\n    output: null,\n    colour: 75,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getExpressionScore\"] = {\n    init: function () {\n      this.jsonInit(getExpressionScore);\n    },\n  };\n\n  Blockly.JavaScript[\"getExpressionScore\"] = function (block) {\n    var expression = block.getFieldValue(\"expressions\");\n    //window.expressions[expression]\n    //console.log(\"expression\", expression)\n    var code = `getExpressionScore('${expression}')`;\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  var getSpeech = {\n    type: \"getspeech\",\n    message0: \"getSpeech\",\n    output: null,\n    colour: 75,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getSpeech\"] = {\n    init: function () {\n      this.jsonInit(getSpeech);\n    },\n  };\n\n  Blockly.JavaScript[\"getSpeech\"] = function (block) {\n    var code = \"getSpeech()\";\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  // Get Physio\n  var getMuscleEnergy = {\n    type: \"getMuscleEnergy\",\n    message0: \"getMuscleEnergy\",\n    output: null,\n    colour: \"250\",\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"getMuscleEnergy\"] = {\n    init: function () {\n      this.jsonInit(getMuscleEnergy);\n    },\n  };\n\n  Blockly.JavaScript[\"getMuscleEnergy\"] = function (block) {\n    var code = \"getPhysio()\";\n    return [code, Blockly.JavaScript.ORDER_FUNCTION_CALL];\n  };\n\n  /* pan() */\n  var speak = {\n    message0: \"speak %1\",\n    args0: [{ type: \"input_value\", name: \"text\", check: \"String\" }],\n    previousStatement: null,\n    nextStatement: null,\n    colour: 355,\n  };\n\n  Blockly.Blocks[\"speak\"] = {\n    init: function () {\n      this.jsonInit(speak);\n    },\n  };\n\n  Blockly.JavaScript[\"speak\"] = function (block) {\n    var text = Blockly.JavaScript.valueToCode(\n      block,\n      \"text\",\n      Blockly.JavaScript.ORDER_ATOMIC\n    );\n    code = `speak(${text})`;\n    return code;\n  };\n\n  var updateBaxterFace = {\n    type: \"updatebaxterface\",\n    message0: \"%1 %2 %3 %4 %5\",\n    args0: [\n      {\n        type: \"field_dropdown\",\n        name: \"emotion\",\n        options: [\n          [\"afraid\", \"Afraid\"],\n          [\"confused\", \"Confused\"],\n          [\"happy\", \"Happy\"],\n          [\"joy\", \"Joy\"],\n          [\"neutral\", \"Neutral\"],\n          [\"reactive\", \"Reactive\"],\n          [\"sad\", \"Sad\"],\n          [\"sassy\", \"Sassy\"],\n          [\"silly\", \"Silly\"],\n          [\"sleep\", \"Sleep\"],\n          [\"surprise\", \"Surprise\"],\n          [\"worried\", \"Worried\"],\n        ],\n      },\n      {\n        type: \"input_dummy\",\n      },\n      {\n        type: \"field_dropdown\",\n        name: \"color\",\n        options: [\n          [\"blue\", \"Blue\"],\n          [\"orange\", \"Orange\"],\n          [\"purple\", \"Purple\"],\n          [\"white\", \"White\"],\n          [\"green\", \"Green\"],\n          [\"yellow\", \"Yellow\"],\n          [\"red\", \"Red\"],\n          [\"gray\", \"Gray\"],\n        ],\n      },\n      {\n        type: \"input_dummy\",\n      },\n      {\n        type: \"field_dropdown\",\n        name: \"gazeDirection\",\n        options: [\n          [\"topLeft\", \"NW\"],\n          [\"topRight\", \"NE\"],\n          [\"bottomLeft\", \"SW\"],\n          [\"bottomRight\", \"SE\"],\n          [\"blink\", \"Blink\"],\n        ],\n      },\n    ],\n    inputsInline: true,\n    previousStatement: null,\n    colour: 355,\n    tooltip: \"\",\n    helpUrl: \"\",\n  };\n\n  Blockly.Blocks[\"updateBaxterFace\"] = {\n    init: function () {\n      this.jsonInit(updateBaxterFace);\n    },\n  };\n\n  Blockly.JavaScript[\"updateBaxterFace\"] = function (block) {\n    var emotion = block.getFieldValue(\"emotion\");\n    var color = block.getFieldValue(\"color\");\n    var gaze = block.getFieldValue(\"gazeDirection\");\n    //window.updateFace(emotion, gaze, color)\n    code = `updateFace('${emotion}', '${gaze}', '${color}' )`;\n    return code;\n  };\n};\n"],"names":["createCustomBlocks","filterData","type","message0","args0","name","text","output","colour","tooltip","helpUrl","Blockly","Blocks","init","this","jsonInit","JavaScript","block","text_low","getFieldValue","text_high","valueToCode","ORDER_ATOMIC","ORDER_NONE","getAbsoluteData","ORDER_FUNCTION_CALL","removeSignalMean","getRawData","plotRaw","inputsInline","check","previousStatement","nextStatement","list","seconds","panBy","angle","code","print","setVelocityX","val","setVelocityY","setPlayerX","setPlayerY","getBandPower","lastDummyAlign0","options","channel","getFacialData","feature","component","console","log","getExpressionScore","getSpeech","getMuscleEnergy","speak","updateBaxterFace","emotion","color","gaze"],"version":3,"file":"index.11c84379.js.map"}
{"mappings":"AAAA;;;;CAIC,GAED;;;;;;CAMC,GACD,QAAQ,yBAAyB,CAAC;IAChC;QACE,MAAM;QACN,UAAU;QACV,OAAO;YACL;gBACE,MAAM;gBACN,MAAM;gBACN,KAAK;gBACL,KAAK;gBACL,OAAO;YACT;SACD;QACD,mBAAmB,IAAI;QACvB,eAAe,IAAI;QACnB,QAAQ;IACV;CACD;AAED;;;CAGC,GACD,QAAQ,UAAU,CAAC,eAAe,GAAG,SAAU,KAAK,EAAE;IACpD,IAAI,UAAU,OAAO,MAAM,aAAa,CAAC;IACzC,IAAI,OAAO,oBAAoB,UAAU;IACzC,OAAO;AACT;AAEA;;;CAGC,GACD,SAAS,8BAA8B,WAAW,EAAE,YAAY,EAAE;IAChE,8DAA8D;IAC9D,QAAQ,UAAU,CAAC,gBAAgB,CAAC;IAEpC,IAAI,UAAU,YAAY,mBAAmB,CAAC,SAC5C,aAAa,EACb,QAAQ,EACR;QACA,kCAAkC;QAClC,yBAAyB;QACzB,WAAW,UAAU,gBAAgB;IACvC;IACA,YAAY,WAAW,CAAC,cAAc,kBAAkB;AAC1D","sources":["src/js/wait_block.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * @fileoverview Example \"wait\" block that will pause the interpreter for a\n * number of seconds. Because wait is a blocking behavior, such blocks will\n * only work in interpreted environments.\n *\n * See https://neil.fraser.name/software/JS-Interpreter/docs.html\n */\nBlockly.defineBlocksWithJsonArray([\n  {\n    type: \"wait_seconds\",\n    message0: \" wait %1 seconds\",\n    args0: [\n      {\n        type: \"field_number\",\n        name: \"SECONDS\",\n        min: 0,\n        max: 600,\n        value: 1,\n      },\n    ],\n    previousStatement: null,\n    nextStatement: null,\n    colour: \"%{BKY_LOOPS_HUE}\",\n  },\n]);\n\n/**\n * Generator for wait block creates call to new method\n * <code>waitForSeconds()</code>.\n */\nBlockly.JavaScript[\"wait_seconds\"] = function (block) {\n  var seconds = Number(block.getFieldValue(\"SECONDS\"));\n  var code = \"waitForSeconds(\" + seconds + \");\\n\";\n  return code;\n};\n\n/**\n * Register the interpreter asynchronous function\n * <code>waitForSeconds()</code>.\n */\nfunction initInterpreterWaitForSeconds(interpreter, globalObject) {\n  // Ensure function name does not conflict with variable names.\n  Blockly.JavaScript.addReservedWords(\"waitForSeconds\");\n\n  var wrapper = interpreter.createAsyncFunction(function (\n    timeInSeconds,\n    callback\n  ) {\n    // Delay the call to the callback.\n    //console.log(\"waiting\");\n    setTimeout(callback, timeInSeconds * 1000);\n  });\n  interpreter.setProperty(globalObject, \"waitForSeconds\", wrapper);\n}\n"],"names":[],"version":3,"file":"index.61138253.js.map","sourceRoot":"/__parcel_source_root/"}